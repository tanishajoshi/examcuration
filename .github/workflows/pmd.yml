- name: PMD
  # You may pin to the exact commit or the version.
  # uses: pmd/pmd-github-action@d425ad2ef41f01603a52bc0b6a8e3a7ec157b534
  uses: pmd/pmd-github-action@v1.2.1
  with:
    # Personal access token (PAT) used to query the latest PMD release and the download URL for PMD.
By default the automatic token for GitHub Actions is used. [Learn more about automatic token authentication](https://docs.github.com/en/actions/security-guides/automatic-token-authentication)
[Learn more about creating and using encrypted secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
    token: # optional, default is ${{ github.token }}
    # PMD version to use. Using "latest" automatically downloads the latest version.
Available versions: <https://github.com/pmd/pmd/releases>
Note: Only PMD 6.31.0 and later is supported due to required support for [Sarif report format](https://pmd.github.io/latest/pmd_userdocs_report_formats.html#sarif).
    version: # optional, default is latest
    # Root directory for sources
    sourcePath: # optional, default is .
    # Comma separated list of ruleset names to use
    rulesets: 
    # Instead of analyze all files under "sourcePath", only the files that have been touched in a pull request or push will be analyzed. This makes the analysis faster and helps especially bigger projects which gradually want to introduce PMD. This helps in enforcing that no new code violation is introduced.
Depending on the analyzed language, the results might be less accurate results. At the moment, this is not a problem, as PMD mostly analyzes each file individually, but that might change in the future.
If the change is very big, not all files might be analyzed. Currently the maximum number of modified files is 300.
Note: When using PMD as a code scanner in order to create "Code scanning alerts" on GitHub, all files should be analyzed in order to produce a complete picture of the project. Otherwise alerts might get closed too soon.
    analyzeModifiedFilesOnly: # optional, default is true
    # By default, all detected violations are added as annotations to the pull  request. You can disable this by setting FALSE. This can be useful if you  are using another tool for this purpose.
    createGitHubAnnotations: # optional, default is true
